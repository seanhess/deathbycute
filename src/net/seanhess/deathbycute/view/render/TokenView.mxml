<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:model="net.seanhess.deathbycute.model.*"
	creationComplete="onComplete()"
	xmlns:utils="flash.utils.*">
	
	<mx:Script>
		<![CDATA[
			import net.seanhess.deathbycute.model.*;
			import assets.TokenAssets;
			
			import mx.effects.easing.Linear;
			public static const MS_PER_PIXEL:int = 1;
			
			protected var timer:Timer = new Timer(3000);
			
			protected var complete:Boolean = false;
			
			protected function onComplete():void
			{
				timer.addEventListener(TimerEvent.TIMER, onTimerComplete, false, 0, true);
				
				this.x = token.location.x;
				this.y = token.location.y;
				complete = true;
				restartAnimation();
			}
			
			public function set state(value:String):void
			{
				if (value == Weapon.BLOCKED)
				{
					timer.reset();
					timer.start();	
				}
			}
			
			protected function onTimerComplete(event:Event):void
			{
				token.state = Token.NONE;
			}
			
			public function set destination(value:Point):void
			{
				restartAnimation();
			}
			
			protected function restartAnimation():void
			{
				if (complete == false || token.destination == null)
					return;
				
				var value:Point = token.destination;
				
				animate.stop();
				
				var totalDistance:int = Math.abs(value.x - token.location.x) + Math.abs(value.y - token.location.y);
				
				goX.fromValue = token.location.x;
				goX.toValue = value.x - (width/2);
				goX.duration = MS_PER_PIXEL * totalDistance; 
				
				
				goY.fromValue = token.location.y;
				goY.toValue = value.y - (height/2);
				goY.duration = MS_PER_PIXEL * totalDistance;
				
				animate.play();
			}
			
			protected function onTweenUpdate():void
			{
				token.location.x = this.x;
				token.location.y = this.y;
			}
			
			protected function onEnd():void
			{
//				// set firing to false // 
//				if (token is Weapon)
//				{
//					(token as Weapon).owner.firing = null;
//				}
			}
			
			protected function set newImage(value:String):void
			{
				actualImage	= imageMap.images[value];
			}
			
			[Bindable] public var actualImage:Class;
			
			public var imageMap:Images = new Images();
				
		]]>
	</mx:Script>
		
	<mx:Number id="hitSize">{token is Weapon ? 25 : 40}</mx:Number>
	<mx:Binding source="token.destination" destination="destination"/>
	<mx:Binding source="token.state" destination="state"/>
	<mx:Binding source="token.image" destination="newImage"/>
	
	<mx:Image source="{actualImage}" alpha="{(token.state == Character.DEAD) ? 0.6 : 1}"/>
	<mx:Image source="{TokenAssets.DEATH_EYES}" visible="{token.state == Character.DEAD}"/>
	<mx:Image source="{TokenAssets.TIMER}" visible="{token.state == Weapon.BLOCKED}" verticalCenter="0" horizontalCenter="0"/>
	<mx:Canvas id="hit" width="{hitSize}" height="{hitSize}" backgroundColor="#0000FF" backgroundAlpha="0" verticalCenter="0" horizontalCenter="0"/>
	
	<mx:Parallel id="animate" target="{this}" effectEnd="onEnd()">
		<mx:AnimateProperty id="goX" property="x" easingFunction="{Linear.easeNone}" tweenUpdate="onTweenUpdate()"/>
		<mx:AnimateProperty id="goY" property="y" easingFunction="{Linear.easeNone}"/>
	</mx:Parallel>
	
	<model:Token id="token"/>
	
</mx:Canvas>
